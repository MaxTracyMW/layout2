classdef tScrollingPanel < utilities.mixin.SharedPanelTests
    %TSCROLLINGPANEL Tests for uix.ScrollingPanel.

    properties ( TestParameter )
        % The constructor name, or class, of the component under test.
        ConstructorName = {'uix.ScrollingPanel'}
        % Name-value pair arguments to use when testing the component's
        % constructor and get/set methods.
        NameValuePairs = {{
            'Units', 'pixels', ...
            'Position', [10, 10, 400, 400], ...
            'Tag', 'Test', ...
            'Visible', 'on', ...
            'Selection', 0, ...
            'Padding', 5, ...
            'MouseWheelEnabled', 'on', ...
            'BackgroundColor', [1, 1, 0], ...
            'Heights', double.empty( 0, 1 ), ...
            'MinimumHeights', double.empty( 0, 1 ), ...
            'VerticalOffsets', double.empty( 0, 1 ), ...
            'VerticalSteps', double.empty( 0, 1 ), ...
            'Widths', double.empty( 0, 1 ), ...
            'MinimumWidths', double.empty( 0, 1 ), ...
            'HorizontalOffsets', double.empty( 0, 1 ), ...
            'HorizontalSteps', double.empty( 0, 1 )
            }}
        % Properties accepting both a row vector and a column vector.
        VectorAcceptingProperties = {
            'VerticalSteps', ...
            'HorizontalSteps'
            }
    end % properties ( TestParameter )

    methods ( Test, Sealed )

        function tSettingPropertyAsRowStoresValue( ...
                testCase, ConstructorName, VectorAcceptingProperties )

            % Create the component with children.
            [component, kids] = testCase...
                .constructComponentWithChildren( ConstructorName );

            % Set the property as a row vector.
            value = 5 * ones( 1, length( kids ) );
            component.(VectorAcceptingProperties) = value;

            % Verify that a column vector has been stored.
            testCase.verifyEqual( ...
                component.(VectorAcceptingProperties), ...
                transpose( value ), ...
                ['Setting the ''', VectorAcceptingProperties, ...
                ''' property of the ', ConstructorName, ...
                ' component as a row vector did ', ...
                'not store the value as a column vector.'] )

        end % tSettingPropertyAsRowStoresValue

        function tContentsPositionIsFullWhenPanelIsResized( ...
                testCase, ConstructorName )

            % Assume that the component is rooted.
            testCase.assumeGraphicsAreRooted()

            % Create a scrolling panel.
            scrollPanel = testCase.constructComponent( ...
                ConstructorName, 'Units', 'pixels' );

            % Add a child.
            c = uicontrol( 'Parent', scrollPanel, 'Units', 'pixels' );

            % Verify the initial position of the child.
            expectedPosition = [1, 1, scrollPanel.Position(3:4)];
            testCase.verifyEqual( c.Position, expectedPosition, ...
                ['Adding a child to ', ConstructorName, ' did not ', ...
                'set the child''s ''Position'' property correctly.'] )

            % Change the dimensions of the scrolling panel.
            scrollPanelPos = scrollPanel.Position;
            for k = 1 : 8
                % Update the 'Position' property of the scrolling panel.
                newDims = 50 * [sin( pi*k/8 ), cos( pi*k/8 )];
                scrollPanel.Position = scrollPanelPos + [0, 0, newDims];
                drawnow()
                % Verify that the child still fills the scroll panel.
                expectedPosition = [1, 1, scrollPanel.Position(3:4)];
                testCase.verifyEqual( c.Position, expectedPosition, ...
                    'AbsTol', 1e-10, ...
                    ['Changing the dimensions of the scrolling ', ...
                    'panel did not update the ''Position'' property ', ...
                    'of its contents correctly.'] )
            end % for

        end % tContentsPositionIsFullWhenPanelIsResized

        function tContentsPositionUpdatesWhenPanelIsResized( ...
                testCase, ConstructorName )

            % Create a scrolling panel.
            testCase.assumeGraphicsAreRooted()
            scrollPanel = testCase.constructComponent( ...
                ConstructorName, ...
                'Units', 'pixels', ...
                'Position', [10, 10, 400, 400] );

            % Add a child.
            c = uicontrol( 'Parent', scrollPanel, 'Units', 'pixels' );

            % Set the dimensions.
            scrollPanel.Widths = 500;
            scrollPanel.Heights = 600;

            % Verify its initial position.
            scrollPanelDims = [scrollPanel.Widths, scrollPanel.Heights];
            expectedPosition = [1, -199, scrollPanelDims];
            testCase.verifyEqual( c.Position, expectedPosition, ...
                ['The initial position of a child of the scrolling ', ...
                'panel is incorrect.'] )

            % Run through a series of changes to the 'Position' property of
            % the scrolling panel.
            for width = [420, 380, 500]
                scrollPanel.Position(3) = width;
                testCase.verifyEqual( c.Position, expectedPosition, ...
                    ['Changing the width of the scrolling panel ', ...
                    'resulted in an incorrect position for its ', ...
                    'contents.'] )
            end % for

            % Change the 'HorizontalOffsets' property.
            scrollPanel.HorizontalOffsets = 50;
            expectedPosition = [-19, -199, scrollPanelDims];
            testCase.verifyEqual( c.Position, expectedPosition, ...
                ['Changing the ''HorizontalOffsets'' property of ', ...
                'the scrolling panel resulted in an incorrect ', ...
                'position for its contents.'] )

            % Change the 'VerticalOffsets' property.
            scrollPanel.VerticalOffsets = 50;
            expectedPosition = [-19, -148, scrollPanelDims];
            testCase.verifyEqual( c.Position, expectedPosition, ...
                ['Changing the ''VerticalOffsets'' property of ', ...
                'the scrolling panel resulted in an incorrect ', ...
                'position for its contents.'] )

        end % tContentsPositionUpdatesWhenPanelIsResized

        function tPanelRespectsMinimumWidths( testCase, ConstructorName )

            % Create a scrolling panel.
            testCase.assumeGraphicsAreRooted()
            scrollPanel = testCase.constructComponent( ...
                ConstructorName, ...
                'Units', 'pixels', ...
                'Position', [10, 10, 200, 200] );

            % Fill it with some controls.
            hBox = uix.HBoxFlex( 'Parent', scrollPanel, ...
                'Padding', 10, ...
                'Spacing', 10 );
            n = 4;
            b = gobjects( n, 1 );
            for k = 1 : n
                b(k) = uicontrol( 'Parent', hBox, 'String', k );
            end % for

            % Set dimensions.
            hBox.MinimumWidths(:) = 100;
            set( scrollPanel, 'MinimumWidths', 450, ...
                'MinimumHeights', 450 )

            % Verify the dimensions of the h-box.
            testCase.verifyEqual( hBox.Position(3:4), [450, 450], ...
                ['Setting the minimum dimensions of the scrolling ', ...
                'panel resulted in incorrect dimensions for its ', ...
                'contents.'] )

            % Verify the dimensions of the controls.
            for k = 1 : n
                testCase.verifyEqual( b(k).Position(3), 100, ...
                    ['Setting the minimum dimensions of the ', ...
                    'scrolling panel resulted in incorrect ', ...
                    'dimensions for its children''s children.'] )
            end % for

        end % tPanelRespectsMinimumWidths

        function tPanelRespectsMinimumHeights( testCase, ConstructorName )

            % Create a scrolling panel.
            testCase.assumeGraphicsAreRooted()
            scrollPanel = testCase.constructComponent( ...
                ConstructorName, ...
                'Units', 'pixels', ...
                'Position', [10, 10, 200, 200] );

            % Fill it with some controls.
            vBox = uix.VBoxFlex( 'Parent', scrollPanel, ...
                'Padding', 10, ...
                'Spacing', 10 );
            n = 4;
            b = gobjects( n, 1 );
            for k = 1 : n
                b(k) = uicontrol( 'Parent', vBox, 'String', k );
            end % for

            % Set dimensions.
            vBox.MinimumHeights(:) = 100;
            set( scrollPanel, 'MinimumWidths', 450, ...
                'MinimumHeights', 450 )

            % Verify the dimensions of the v-box.
            testCase.verifyEqual( vBox.Position(3:4), [450, 450], ...
                ['Setting the minimum dimensions of the scrolling ', ...
                'panel resulted in incorrect dimensions for its ', ...
                'contents.'] )

            % Verify the dimensions of the controls.
            for k = 1 : n
                testCase.verifyEqual( b(k).Position(4), 100, ...
                    ['Setting the minimum dimensions of the ', ...
                    'scrolling panel resulted in incorrect ', ...
                    'dimensions for its children''s children.'] )
            end % for

        end % tPanelRespectsMinimumHeights

        function tSettingEmptyParentFromNonEmptyIsWarningFree( ...
                testCase, ConstructorName )

            % Create a scrolling panel.
            testCase.assumeGraphicsAreRooted()
            scrollPanel = testCase.constructComponent( ConstructorName );
            testCase.addTeardown( @() delete( scrollPanel ) )

            % Verify that setting an empty value for the 'Parent' property
            % is warning-free.
            f = @() set( scrollPanel, 'Parent', [] );
            testCase.verifyWarningFree( f, ...
                ['The ', ConstructorName, ' component was not ', ...
                'warning-free when its ''Parent'' property was ', ...
                'changed from a nonempty value to an empty value.'] )

        end % tSettingEmptyParentFromNonEmptyIsWarningFree

        function tOffsetsAreCorrectInThePresenceOfSliders( ...
                testCase, ConstructorName )

            % Create a scrolling panel.
            testCase.assumeGraphicsAreRooted()
            scrollPanel = testCase.constructComponent( ConstructorName );

            % Add a control.
            uicontrol( 'Parent', scrollPanel, ...
                'Units', 'pixels', ...
                'Position', [1, 1, 1000, 1000] )

            % Adjust the dimensions.
            set( scrollPanel, 'Widths', 600, 'Heights', 600 )

            % Verify the offsets.
            testCase.verifyEqual( scrollPanel.VerticalOffsets, 0, ...
                ['The ''VerticalOffsets'' property on the ', ...
                'scrolling panel is not correct when a large ', ...
                'child was added and the dimensions of the panel ', ...
                'were large.'] )
            testCase.verifyEqual( scrollPanel.HorizontalOffsets, 0, ...
                ['The ''HorizontalOffsets'' property on the ', ...
                'scrolling panel is not correcte when a large ', ...
                'child was added and the dimensions of the panel ', ...
                'were large.'] )

        end % tOffsetsAreCorrectInThePresenceOfSliders

    end % methods ( Test, Sealed )

end % class